import socket
from http.server import BaseHTTPRequestHandler
from io import BytesIO
from urllib.parse import parse_qs

import requests
import sys


class HTTPRequest(BaseHTTPRequestHandler):
    def __init__(self, request_text):
        self.rfile = BytesIO(request_text)
        self.raw_requestline = self.rfile.readline()
        self.error_code = self.error_message = None
        self.parse_request()

    def send_error(self, code, message):
        self.error_code = code
        self.error_message = message


def parse_auth_code (pathstring):
    querystring = path_to_query_str(pathstring)
    querydict = dict(parse_qs(querystring))

    if querydict["code"]:
        return querydict["code"]
    else:
        return querydict["error"]


def path_to_query_str (pathstring):
    querystring = pathstring.split("?", 1)[1]
    return querystring



# use socket to listen to authorization callback
listen_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ("localhost", 5050)
listen_sock.bind(server_address)

listen_sock.listen(1)
while True:
    # wait for connection
    connection, client_address = listen_sock.accept()

    try:
        rawrequeststring = connection.recv(4096)
        request = HTTPRequest(rawrequeststring)
        print(parse_auth_code(request.path))

    finally:
        connection.close()
